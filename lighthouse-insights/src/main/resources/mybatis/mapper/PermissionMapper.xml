<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dtstep.lighthouse.insights.dao.PermissionDao">
    <resultMap id="permissionResultMap" type="com.dtstep.lighthouse.common.modal.Permission">
        <result property="id" column="id"/>
        <result property="ownerId" column="owner_id"/>
        <result property="ownerType" column="owner_type" typeHandler="com.dtstep.lighthouse.insights.types.OwnerTypeEnumTypeHandler"/>
        <result property="roleId" column="role_id"/>
        <result property="expireTime" column="expire_time"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.dtstep.lighthouse.common.modal.Permission" >
        INSERT INTO ldp_permissions (`owner_id`, `owner_type`,`role_id`, `expire_time`, `create_time`, `update_time`) VALUES
        (
            #{ownerId,jdbcType=INTEGER},
            #{ownerType,jdbcType=INTEGER,typeHandler=com.dtstep.lighthouse.insights.types.OwnerTypeEnumTypeHandler},
            #{roleId,jdbcType=INTEGER},
            #{expireTime,jdbcType=TIMESTAMP},
            #{createTime,jdbcType=TIMESTAMP},
            #{updateTime,jdbcType=TIMESTAMP}
        )
    </insert>

    <insert id="batchInsert" parameterType="java.util.List">
        INSERT INTO ldp_permissions (`owner_id`, `owner_type`,`role_id`, `expire_time`,`create_time`, `update_time`) VALUES
        <foreach collection="list" item="item" separator=",">
            (
            #{item.ownerId,jdbcType=INTEGER},
            #{item.ownerType,jdbcType=INTEGER,typeHandler=com.dtstep.lighthouse.insights.types.OwnerTypeEnumTypeHandler},
            #{item.roleId,jdbcType=INTEGER},
            #{item.expireTime,jdbcType=TIMESTAMP},
            #{item.createTime,jdbcType=TIMESTAMP},
            #{item.updateTime,jdbcType=TIMESTAMP}
            )
        </foreach>
    </insert>

    <select id="queryList" resultMap="permissionResultMap">
        SELECT p.`id`,p.`owner_id`,p.`owner_type`,p.`role_id`,p.`expire_time`,p.`create_time`,p.`update_time`
        FROM ldp_permissions p
        LEFT JOIN ldp_users u ON p.owner_type = '1' AND p.owner_id = u.id
        LEFT JOIN ldp_departments d ON p.owner_type = '2' AND p.owner_id = d.id
        <where>
            <if test="queryParam.roleId != null">
                AND p.role_id = #{queryParam.roleId}
            </if>
            <if test="queryParam.ownerType != null">
                AND p.owner_type = #{queryParam.ownerType.ownerType}
            </if>
            <if test="queryParam.ownerId != null">
                AND p.owner_id = #{queryParam.ownerId}
            </if>
            <if test="queryParam.search != null">
               AND ((p.owner_type = '1' AND u.username LIKE CONCAT('%', #{queryParam.search}, '%'))
                OR (p.owner_type = '2' AND d.name LIKE CONCAT('%', #{queryParam.search}, '%')))
            </if>
        </where>
    </select>

    <select id="queryAuthList" resultMap="permissionResultMap">
        select * from (select a.`id`,a.`owner_id`,a.`owner_type`,a.`role_id`,a.`expire_time`,a.`create_time`,a.`update_time`,
        case
        when a.role_type = '10' then b.title
        when a.role_type = '14' then c.title
        when a.role_type = '18' then d.title
        end as title
        from (SELECT p.`id`,p.`owner_id`,p.`owner_type`,p.`role_id`,p.`expire_time`,p.`create_time`,p.`update_time`,r.resource_id,r.role_type
        FROM ldp_permissions p left join ldp_roles r on p.role_id = r.id) a
        LEFT join ldp_projects b on a.role_type = '10' and a.resource_id = b.id
        LEFT join ldp_stats c on a.role_type = '14' and a.resource_id = c.id
        LEFT join ldp_views d on a.role_type = '18' and a.resource_id = d.id) t
        <where>
            <if test="queryParam.ownerId != null">
                AND t.owner_id = #{queryParam.ownerId}
            </if>
            <if test="queryParam.ownerType != null">
                AND t.owner_type = #{queryParam.ownerType.ownerType}
            </if>
            <if test="queryParam.search != null">
                AND t.title LIKE CONCAT('%', #{queryParam.search}, '%')
            </if>
        </where>
        order by t.create_time desc
    </select>

    <select id="existPermission" resultType="boolean">
        SELECT COUNT(1) > 0
        FROM ldp_permissions
        WHERE owner_id = #{ownerId} and owner_type = #{ownerType.ownerType} and role_id = #{roleId}
    </select>

    <update id="extensionPermission">
        UPDATE ldp_permissions SET expire_time = DATE_ADD(expire_time, INTERVAL #{expire} SECOND) where id = #{id}
    </update>

    <select id="checkUserPermission" resultType="boolean">
        WITH RECURSIVE depart_cte AS (
            SELECT d.id,d.pid
            FROM ldp_departments d
            where id in (SELECT department_id
                         FROM ldp_users
                         WHERE id = #{userId})
            UNION ALL
            SELECT d.id,d.pid
            FROM ldp_departments d
                     JOIN depart_cte ON depart_cte.pid = d.id
        ),
        cte AS (
            SELECT id, pid
            FROM ldp_roles
            WHERE id = #{roleId}
            UNION ALL
            SELECT t.id, t.pid
            FROM ldp_roles t
                     INNER JOIN cte ON t.id = cte.pid
        )
        SELECT COUNT(1) > 0
        FROM cte
                 INNER JOIN (
            SELECT role_id
            FROM (
                     SELECT role_id
                     FROM ldp_permissions
                     WHERE owner_id = #{userId}
                       AND owner_type = '1'
                     UNION ALL
                     SELECT role_id
                     FROM ldp_permissions
                     WHERE owner_id IN (
                         SELECT id
                         FROM depart_cte
                     )
                    AND owner_type = '2'
                 ) temp
            GROUP BY role_id
        ) d
                            ON cte.id = d.role_id
    </select>

    <select id="queryUserManagePermission" resultMap="permissionResultMap">
        WITH RECURSIVE cte AS (
            SELECT id
            FROM ldp_roles
            WHERE role_type = '1' and resource_id = '0'
            UNION ALL
            SELECT t.id
            FROM ldp_roles t
                     INNER JOIN cte ON t.pid = cte.id
        )
        select a.* from ldp_permissions a
                            inner join (select id from cte) b on a.role_id = b.id
        where owner_id = #{userId} and owner_type = '1' limit #{limit}
    </select>

    <select id="queryUserPermissionsByRoleId" resultType="int">
        select owner_id from ldp_permissions where role_id = #{roleId} and owner_type = '1' limit #{limit}
    </select>

    <select id="queryById" resultMap="permissionResultMap">
        SELECT `id`,`owner_id`, `owner_type`,`role_id`, `expire_time`, `create_time`, `update_time` FROM ldp_permissions WHERE id = #{id}
    </select>

    <delete id="delete">
        delete
        FROM ldp_permissions
        <where>
            <if test="queryParam.id != null">
                AND id = #{queryParam.id}
            </if>
            <if test="queryParam.roleId != null">
                AND role_id = #{queryParam.roleId}
            </if>
            <if test="queryParam.ownerId != null">
                AND owner_id = #{queryParam.ownerId}
            </if>
            <if test="queryParam.ownerType != null">
                AND owner_type = #{queryParam.ownerType.ownerType}
            </if>
        </where>
    </delete>

    <delete id="deleteByUserId">
        delete FROM ldp_permissions WHERE owner_id = #{userId} and owner_type = '1'
    </delete>

</mapper>