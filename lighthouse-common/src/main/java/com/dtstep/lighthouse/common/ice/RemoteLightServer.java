//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `lighthouse.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.dtstep.lighthouse.common.ice;

public interface RemoteLightServer extends com.zeroc.Ice.Object
{
    byte[] process(byte[] message, com.zeroc.Ice.Current current)
        throws LightRpcException;

    byte[] queryGroupInfo(String token, com.zeroc.Ice.Current current)
        throws LightRpcException;

    byte[] queryStatInfo(int id, com.zeroc.Ice.Current current)
        throws LightRpcException;

    byte[] dataDurationQuery(int statId, String dimensValue, long startTime, long endTime, com.zeroc.Ice.Current current)
        throws LightRpcException;

    byte[] dataQuery(int statId, String dimensValue, java.util.List<Long> batchList, com.zeroc.Ice.Current current)
        throws LightRpcException;

    byte[] dataDurationQueryWithDimensList(int statId, java.util.List<String> dimensValueList, long startTime, long endTime, com.zeroc.Ice.Current current)
        throws LightRpcException;

    byte[] dataQueryWithDimensList(int statId, java.util.List<String> dimensValueList, java.util.List<Long> batchList, com.zeroc.Ice.Current current)
        throws LightRpcException;

    byte[] limitQuery(int statId, long batchTime, com.zeroc.Ice.Current current)
        throws LightRpcException;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::LightServer::RemoteLightServer"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::LightServer::RemoteLightServer";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_process(RemoteLightServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        byte[] iceP_message;
        iceP_message = istr.readByteSeq();
        inS.endReadParams();
        byte[] ret = obj.process(iceP_message, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeByteSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_queryGroupInfo(RemoteLightServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_token;
        iceP_token = istr.readString();
        inS.endReadParams();
        byte[] ret = obj.queryGroupInfo(iceP_token, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeByteSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_queryStatInfo(RemoteLightServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_id;
        iceP_id = istr.readInt();
        inS.endReadParams();
        byte[] ret = obj.queryStatInfo(iceP_id, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeByteSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_dataDurationQuery(RemoteLightServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_statId;
        String iceP_dimensValue;
        long iceP_startTime;
        long iceP_endTime;
        iceP_statId = istr.readInt();
        iceP_dimensValue = istr.readString();
        iceP_startTime = istr.readLong();
        iceP_endTime = istr.readLong();
        inS.endReadParams();
        byte[] ret = obj.dataDurationQuery(iceP_statId, iceP_dimensValue, iceP_startTime, iceP_endTime, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeByteSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_dataQuery(RemoteLightServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_statId;
        String iceP_dimensValue;
        java.util.List<Long> iceP_batchList;
        iceP_statId = istr.readInt();
        iceP_dimensValue = istr.readString();
        iceP_batchList = LongListHelper.read(istr);
        inS.endReadParams();
        byte[] ret = obj.dataQuery(iceP_statId, iceP_dimensValue, iceP_batchList, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeByteSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_dataDurationQueryWithDimensList(RemoteLightServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_statId;
        java.util.List<String> iceP_dimensValueList;
        long iceP_startTime;
        long iceP_endTime;
        iceP_statId = istr.readInt();
        iceP_dimensValueList = StringListHelper.read(istr);
        iceP_startTime = istr.readLong();
        iceP_endTime = istr.readLong();
        inS.endReadParams();
        byte[] ret = obj.dataDurationQueryWithDimensList(iceP_statId, iceP_dimensValueList, iceP_startTime, iceP_endTime, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeByteSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_dataQueryWithDimensList(RemoteLightServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_statId;
        java.util.List<String> iceP_dimensValueList;
        java.util.List<Long> iceP_batchList;
        iceP_statId = istr.readInt();
        iceP_dimensValueList = StringListHelper.read(istr);
        iceP_batchList = LongListHelper.read(istr);
        inS.endReadParams();
        byte[] ret = obj.dataQueryWithDimensList(iceP_statId, iceP_dimensValueList, iceP_batchList, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeByteSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_limitQuery(RemoteLightServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_statId;
        long iceP_batchTime;
        iceP_statId = istr.readInt();
        iceP_batchTime = istr.readLong();
        inS.endReadParams();
        byte[] ret = obj.limitQuery(iceP_statId, iceP_batchTime, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeByteSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "dataDurationQuery",
        "dataDurationQueryWithDimensList",
        "dataQuery",
        "dataQueryWithDimensList",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "limitQuery",
        "process",
        "queryGroupInfo",
        "queryStatInfo"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_dataDurationQuery(this, in, current);
            }
            case 1:
            {
                return _iceD_dataDurationQueryWithDimensList(this, in, current);
            }
            case 2:
            {
                return _iceD_dataQuery(this, in, current);
            }
            case 3:
            {
                return _iceD_dataQueryWithDimensList(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 7:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 8:
            {
                return _iceD_limitQuery(this, in, current);
            }
            case 9:
            {
                return _iceD_process(this, in, current);
            }
            case 10:
            {
                return _iceD_queryGroupInfo(this, in, current);
            }
            case 11:
            {
                return _iceD_queryStatInfo(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
