// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.5
//
// <auto-generated>
//
// Generated from file `lighthouse.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.dtstep.lighthouse.common.ice;

/**
 * Provides type-specific helper functions.
 **/
public final class DataQueryInterfacePrxHelper extends Ice.ObjectPrxHelperBase implements DataQueryInterfacePrx
{
    private static final String __dataQuery_name = "dataQuery";

    public String dataQuery(int statId, String dimens, long startTime, long endTime)
    {
        return dataQuery(statId, dimens, startTime, endTime, null, false);
    }

    public String dataQuery(int statId, String dimens, long startTime, long endTime, java.util.Map<String, String> __ctx)
    {
        return dataQuery(statId, dimens, startTime, endTime, __ctx, true);
    }

    private String dataQuery(int statId, String dimens, long startTime, long endTime, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__dataQuery_name);
        return end_dataQuery(begin_dataQuery(statId, dimens, startTime, endTime, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_dataQuery(int statId, String dimens, long startTime, long endTime)
    {
        return begin_dataQuery(statId, dimens, startTime, endTime, null, false, false, null);
    }

    public Ice.AsyncResult begin_dataQuery(int statId, String dimens, long startTime, long endTime, java.util.Map<String, String> __ctx)
    {
        return begin_dataQuery(statId, dimens, startTime, endTime, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_dataQuery(int statId, String dimens, long startTime, long endTime, Ice.Callback __cb)
    {
        return begin_dataQuery(statId, dimens, startTime, endTime, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_dataQuery(int statId, String dimens, long startTime, long endTime, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_dataQuery(statId, dimens, startTime, endTime, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_dataQuery(int statId, String dimens, long startTime, long endTime, Callback_DataQueryInterface_dataQuery __cb)
    {
        return begin_dataQuery(statId, dimens, startTime, endTime, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_dataQuery(int statId, String dimens, long startTime, long endTime, java.util.Map<String, String> __ctx, Callback_DataQueryInterface_dataQuery __cb)
    {
        return begin_dataQuery(statId, dimens, startTime, endTime, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_dataQuery(int statId, 
                                           String dimens, 
                                           long startTime, 
                                           long endTime, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_dataQuery(statId, dimens, startTime, endTime, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_dataQuery(int statId, 
                                           String dimens, 
                                           long startTime, 
                                           long endTime, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_dataQuery(statId, dimens, startTime, endTime, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_dataQuery(int statId, 
                                           String dimens, 
                                           long startTime, 
                                           long endTime, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_dataQuery(statId, dimens, startTime, endTime, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_dataQuery(int statId, 
                                           String dimens, 
                                           long startTime, 
                                           long endTime, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_dataQuery(statId, dimens, startTime, endTime, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_dataQuery(int statId, 
                                            String dimens, 
                                            long startTime, 
                                            long endTime, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_dataQuery(statId, dimens, startTime, endTime, __ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           DataQueryInterfacePrxHelper.__dataQuery_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_dataQuery(int statId, 
                                            String dimens, 
                                            long startTime, 
                                            long endTime, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__dataQuery_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__dataQuery_name, __cb);
        try
        {
            __result.prepare(__dataQuery_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(statId);
            __os.writeString(dimens);
            __os.writeLong(startTime);
            __os.writeLong(endTime);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_dataQuery(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __dataQuery_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __dataQuery_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        DataQueryInterfacePrx __proxy = (DataQueryInterfacePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_dataQuery(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __dataQueryWithBatchList_name = "dataQueryWithBatchList";

    public String dataQueryWithBatchList(int statId, String dimens, java.util.List<Long> batchTimeList)
    {
        return dataQueryWithBatchList(statId, dimens, batchTimeList, null, false);
    }

    public String dataQueryWithBatchList(int statId, String dimens, java.util.List<Long> batchTimeList, java.util.Map<String, String> __ctx)
    {
        return dataQueryWithBatchList(statId, dimens, batchTimeList, __ctx, true);
    }

    private String dataQueryWithBatchList(int statId, String dimens, java.util.List<Long> batchTimeList, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__dataQueryWithBatchList_name);
        return end_dataQueryWithBatchList(begin_dataQueryWithBatchList(statId, dimens, batchTimeList, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_dataQueryWithBatchList(int statId, String dimens, java.util.List<Long> batchTimeList)
    {
        return begin_dataQueryWithBatchList(statId, dimens, batchTimeList, null, false, false, null);
    }

    public Ice.AsyncResult begin_dataQueryWithBatchList(int statId, String dimens, java.util.List<Long> batchTimeList, java.util.Map<String, String> __ctx)
    {
        return begin_dataQueryWithBatchList(statId, dimens, batchTimeList, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_dataQueryWithBatchList(int statId, String dimens, java.util.List<Long> batchTimeList, Ice.Callback __cb)
    {
        return begin_dataQueryWithBatchList(statId, dimens, batchTimeList, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_dataQueryWithBatchList(int statId, String dimens, java.util.List<Long> batchTimeList, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_dataQueryWithBatchList(statId, dimens, batchTimeList, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_dataQueryWithBatchList(int statId, String dimens, java.util.List<Long> batchTimeList, Callback_DataQueryInterface_dataQueryWithBatchList __cb)
    {
        return begin_dataQueryWithBatchList(statId, dimens, batchTimeList, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_dataQueryWithBatchList(int statId, String dimens, java.util.List<Long> batchTimeList, java.util.Map<String, String> __ctx, Callback_DataQueryInterface_dataQueryWithBatchList __cb)
    {
        return begin_dataQueryWithBatchList(statId, dimens, batchTimeList, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_dataQueryWithBatchList(int statId, 
                                                        String dimens, 
                                                        java.util.List<Long> batchTimeList,
                                                        IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_dataQueryWithBatchList(statId, dimens, batchTimeList, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_dataQueryWithBatchList(int statId, 
                                                        String dimens, 
                                                        java.util.List<Long> batchTimeList,
                                                        IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_dataQueryWithBatchList(statId, dimens, batchTimeList, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_dataQueryWithBatchList(int statId, 
                                                        String dimens, 
                                                        java.util.List<Long> batchTimeList,
                                                        java.util.Map<String, String> __ctx, 
                                                        IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_dataQueryWithBatchList(statId, dimens, batchTimeList, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_dataQueryWithBatchList(int statId, 
                                                        String dimens, 
                                                        java.util.List<Long> batchTimeList,
                                                        java.util.Map<String, String> __ctx, 
                                                        IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_dataQueryWithBatchList(statId, dimens, batchTimeList, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_dataQueryWithBatchList(int statId, 
                                                         String dimens, 
                                                         java.util.List<Long> batchTimeList,
                                                         java.util.Map<String, String> __ctx, 
                                                         boolean __explicitCtx, 
                                                         boolean __synchronous, 
                                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_dataQueryWithBatchList(statId, dimens, batchTimeList, __ctx, __explicitCtx, __synchronous, 
                                            new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                                {
                                                    public final void __completed(Ice.AsyncResult __result)
                                                    {
                                                        DataQueryInterfacePrxHelper.__dataQueryWithBatchList_completed(this, __result);
                                                    }
                                                });
    }

    private Ice.AsyncResult begin_dataQueryWithBatchList(int statId, 
                                                         String dimens, 
                                                         java.util.List<Long> batchTimeList,
                                                         java.util.Map<String, String> __ctx, 
                                                         boolean __explicitCtx, 
                                                         boolean __synchronous, 
                                                         IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__dataQueryWithBatchList_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__dataQueryWithBatchList_name, __cb);
        try
        {
            __result.prepare(__dataQueryWithBatchList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(statId);
            __os.writeString(dimens);
            LongListHelper.write(__os, batchTimeList);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_dataQueryWithBatchList(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __dataQueryWithBatchList_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __dataQueryWithBatchList_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        DataQueryInterfacePrx __proxy = (DataQueryInterfacePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_dataQueryWithBatchList(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __dataQueryWithDimensList_name = "dataQueryWithDimensList";

    public String dataQueryWithDimensList(int statId, java.util.List<String> dimensList, long batchTime)
    {
        return dataQueryWithDimensList(statId, dimensList, batchTime, null, false);
    }

    public String dataQueryWithDimensList(int statId, java.util.List<String> dimensList, long batchTime, java.util.Map<String, String> __ctx)
    {
        return dataQueryWithDimensList(statId, dimensList, batchTime, __ctx, true);
    }

    private String dataQueryWithDimensList(int statId, java.util.List<String> dimensList, long batchTime, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__dataQueryWithDimensList_name);
        return end_dataQueryWithDimensList(begin_dataQueryWithDimensList(statId, dimensList, batchTime, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_dataQueryWithDimensList(int statId, java.util.List<String> dimensList, long batchTime)
    {
        return begin_dataQueryWithDimensList(statId, dimensList, batchTime, null, false, false, null);
    }

    public Ice.AsyncResult begin_dataQueryWithDimensList(int statId, java.util.List<String> dimensList, long batchTime, java.util.Map<String, String> __ctx)
    {
        return begin_dataQueryWithDimensList(statId, dimensList, batchTime, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_dataQueryWithDimensList(int statId, java.util.List<String> dimensList, long batchTime, Ice.Callback __cb)
    {
        return begin_dataQueryWithDimensList(statId, dimensList, batchTime, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_dataQueryWithDimensList(int statId, java.util.List<String> dimensList, long batchTime, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_dataQueryWithDimensList(statId, dimensList, batchTime, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_dataQueryWithDimensList(int statId, java.util.List<String> dimensList, long batchTime, Callback_DataQueryInterface_dataQueryWithDimensList __cb)
    {
        return begin_dataQueryWithDimensList(statId, dimensList, batchTime, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_dataQueryWithDimensList(int statId, java.util.List<String> dimensList, long batchTime, java.util.Map<String, String> __ctx, Callback_DataQueryInterface_dataQueryWithDimensList __cb)
    {
        return begin_dataQueryWithDimensList(statId, dimensList, batchTime, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_dataQueryWithDimensList(int statId, 
                                                         java.util.List<String> dimensList,
                                                         long batchTime, 
                                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_dataQueryWithDimensList(statId, dimensList, batchTime, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_dataQueryWithDimensList(int statId, 
                                                         java.util.List<String> dimensList,
                                                         long batchTime, 
                                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_dataQueryWithDimensList(statId, dimensList, batchTime, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_dataQueryWithDimensList(int statId, 
                                                         java.util.List<String> dimensList,
                                                         long batchTime, 
                                                         java.util.Map<String, String> __ctx, 
                                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_dataQueryWithDimensList(statId, dimensList, batchTime, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_dataQueryWithDimensList(int statId, 
                                                         java.util.List<String> dimensList,
                                                         long batchTime, 
                                                         java.util.Map<String, String> __ctx, 
                                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_dataQueryWithDimensList(statId, dimensList, batchTime, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_dataQueryWithDimensList(int statId, 
                                                          java.util.List<String> dimensList,
                                                          long batchTime, 
                                                          java.util.Map<String, String> __ctx, 
                                                          boolean __explicitCtx, 
                                                          boolean __synchronous, 
                                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_dataQueryWithDimensList(statId, dimensList, batchTime, __ctx, __explicitCtx, __synchronous, 
                                             new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                                 {
                                                     public final void __completed(Ice.AsyncResult __result)
                                                     {
                                                         DataQueryInterfacePrxHelper.__dataQueryWithDimensList_completed(this, __result);
                                                     }
                                                 });
    }

    private Ice.AsyncResult begin_dataQueryWithDimensList(int statId, 
                                                          java.util.List<String> dimensList,
                                                          long batchTime, 
                                                          java.util.Map<String, String> __ctx, 
                                                          boolean __explicitCtx, 
                                                          boolean __synchronous, 
                                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__dataQueryWithDimensList_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__dataQueryWithDimensList_name, __cb);
        try
        {
            __result.prepare(__dataQueryWithDimensList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(statId);
            StringListHelper.write(__os, dimensList);
            __os.writeLong(batchTime);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_dataQueryWithDimensList(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __dataQueryWithDimensList_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __dataQueryWithDimensList_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        DataQueryInterfacePrx __proxy = (DataQueryInterfacePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_dataQueryWithDimensList(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __queryDimens_name = "queryDimens";

    public java.util.List<String> queryDimens(String token, String dimens, String lastDimens, int limit)
    {
        return queryDimens(token, dimens, lastDimens, limit, null, false);
    }

    public java.util.List<String> queryDimens(String token, String dimens, String lastDimens, int limit, java.util.Map<String, String> __ctx)
    {
        return queryDimens(token, dimens, lastDimens, limit, __ctx, true);
    }

    private java.util.List<String> queryDimens(String token, String dimens, String lastDimens, int limit, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryDimens_name);
        return end_queryDimens(begin_queryDimens(token, dimens, lastDimens, limit, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryDimens(String token, String dimens, String lastDimens, int limit)
    {
        return begin_queryDimens(token, dimens, lastDimens, limit, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryDimens(String token, String dimens, String lastDimens, int limit, java.util.Map<String, String> __ctx)
    {
        return begin_queryDimens(token, dimens, lastDimens, limit, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryDimens(String token, String dimens, String lastDimens, int limit, Ice.Callback __cb)
    {
        return begin_queryDimens(token, dimens, lastDimens, limit, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryDimens(String token, String dimens, String lastDimens, int limit, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryDimens(token, dimens, lastDimens, limit, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryDimens(String token, String dimens, String lastDimens, int limit, Callback_DataQueryInterface_queryDimens __cb)
    {
        return begin_queryDimens(token, dimens, lastDimens, limit, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryDimens(String token, String dimens, String lastDimens, int limit, java.util.Map<String, String> __ctx, Callback_DataQueryInterface_queryDimens __cb)
    {
        return begin_queryDimens(token, dimens, lastDimens, limit, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryDimens(String token, 
                                             String dimens, 
                                             String lastDimens, 
                                             int limit, 
                                             IceInternal.Functional_GenericCallback1<java.util.List<String>> __responseCb,
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryDimens(token, dimens, lastDimens, limit, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryDimens(String token, 
                                             String dimens, 
                                             String lastDimens, 
                                             int limit, 
                                             IceInternal.Functional_GenericCallback1<java.util.List<String>> __responseCb,
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryDimens(token, dimens, lastDimens, limit, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryDimens(String token, 
                                             String dimens, 
                                             String lastDimens, 
                                             int limit, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<java.util.List<String>> __responseCb,
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryDimens(token, dimens, lastDimens, limit, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryDimens(String token, 
                                             String dimens, 
                                             String lastDimens, 
                                             int limit, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<java.util.List<String>> __responseCb,
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryDimens(token, dimens, lastDimens, limit, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryDimens(String token, 
                                              String dimens, 
                                              String lastDimens, 
                                              int limit, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_GenericCallback1<java.util.List<String>> __responseCb,
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryDimens(token, dimens, lastDimens, limit, __ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackArg1<java.util.List<String>>(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             DataQueryInterfacePrxHelper.__queryDimens_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_queryDimens(String token, 
                                              String dimens, 
                                              String lastDimens, 
                                              int limit, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryDimens_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryDimens_name, __cb);
        try
        {
            __result.prepare(__queryDimens_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(token);
            __os.writeString(dimens);
            __os.writeString(lastDimens);
            __os.writeInt(limit);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public java.util.List<String> end_queryDimens(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryDimens_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            java.util.List<String> __ret;
            __ret = StringListHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryDimens_completed(Ice.TwowayCallbackArg1<java.util.List<String>> __cb, Ice.AsyncResult __result)
    {
        DataQueryInterfacePrx __proxy = (DataQueryInterfacePrx)__result.getProxy();
        java.util.List<String> __ret = null;
        try
        {
            __ret = __proxy.end_queryDimens(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static DataQueryInterfacePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), DataQueryInterfacePrx.class, DataQueryInterfacePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static DataQueryInterfacePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), DataQueryInterfacePrx.class, DataQueryInterfacePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static DataQueryInterfacePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), DataQueryInterfacePrx.class, DataQueryInterfacePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static DataQueryInterfacePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), DataQueryInterfacePrx.class, DataQueryInterfacePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static DataQueryInterfacePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, DataQueryInterfacePrx.class, DataQueryInterfacePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static DataQueryInterfacePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, DataQueryInterfacePrx.class, DataQueryInterfacePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::LightHouseServer::DataQueryInterface"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, DataQueryInterfacePrx v)
    {
        __os.writeProxy(v);
    }

    public static DataQueryInterfacePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            DataQueryInterfacePrxHelper result = new DataQueryInterfacePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
