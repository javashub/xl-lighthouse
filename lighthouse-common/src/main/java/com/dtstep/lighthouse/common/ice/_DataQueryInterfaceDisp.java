// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.5
//
// <auto-generated>
//
// Generated from file `lighthouse.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.dtstep.lighthouse.common.ice;

public abstract class _DataQueryInterfaceDisp extends Ice.ObjectImpl implements DataQueryInterface
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws CloneNotSupportedException
    {
        throw new CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::LightHouseServer::DataQueryInterface"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final String dataQuery(int statId, String dimens, long startTime, long endTime)
    {
        return dataQuery(statId, dimens, startTime, endTime, null);
    }

    public final String dataQueryWithBatchList(int statId, String dimens, java.util.List<Long> batchTimeList)
    {
        return dataQueryWithBatchList(statId, dimens, batchTimeList, null);
    }

    public final String dataQueryWithDimensList(int statId, java.util.List<String> dimensList, long batchTime)
    {
        return dataQueryWithDimensList(statId, dimensList, batchTime, null);
    }

    public final java.util.List<String> queryDimens(String token, String dimens, String lastDimens, int limit)
    {
        return queryDimens(token, dimens, lastDimens, limit, null);
    }

    public static Ice.DispatchStatus ___dataQuery(DataQueryInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int statId;
        String dimens;
        long startTime;
        long endTime;
        statId = __is.readInt();
        dimens = __is.readString();
        startTime = __is.readLong();
        endTime = __is.readLong();
        __inS.endReadParams();
        String __ret = __obj.dataQuery(statId, dimens, startTime, endTime, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___dataQueryWithBatchList(DataQueryInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int statId;
        String dimens;
        java.util.List<Long> batchTimeList;
        statId = __is.readInt();
        dimens = __is.readString();
        batchTimeList = LongListHelper.read(__is);
        __inS.endReadParams();
        String __ret = __obj.dataQueryWithBatchList(statId, dimens, batchTimeList, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___dataQueryWithDimensList(DataQueryInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int statId;
        java.util.List<String> dimensList;
        long batchTime;
        statId = __is.readInt();
        dimensList = StringListHelper.read(__is);
        batchTime = __is.readLong();
        __inS.endReadParams();
        String __ret = __obj.dataQueryWithDimensList(statId, dimensList, batchTime, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryDimens(DataQueryInterface __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String token;
        String dimens;
        String lastDimens;
        int limit;
        token = __is.readString();
        dimens = __is.readString();
        lastDimens = __is.readString();
        limit = __is.readInt();
        __inS.endReadParams();
        java.util.List<String> __ret = __obj.queryDimens(token, dimens, lastDimens, limit, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        StringListHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "dataQuery",
        "dataQueryWithBatchList",
        "dataQueryWithDimensList",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "queryDimens"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___dataQuery(this, in, __current);
            }
            case 1:
            {
                return ___dataQueryWithBatchList(this, in, __current);
            }
            case 2:
            {
                return ___dataQueryWithDimensList(this, in, __current);
            }
            case 3:
            {
                return ___ice_id(this, in, __current);
            }
            case 4:
            {
                return ___ice_ids(this, in, __current);
            }
            case 5:
            {
                return ___ice_isA(this, in, __current);
            }
            case 6:
            {
                return ___ice_ping(this, in, __current);
            }
            case 7:
            {
                return ___queryDimens(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
