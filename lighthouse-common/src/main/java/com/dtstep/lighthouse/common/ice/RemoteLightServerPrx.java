//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `lighthouse.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.dtstep.lighthouse.common.ice;

public interface RemoteLightServerPrx extends com.zeroc.Ice.ObjectPrx
{
    default byte[] process(byte[] message)
        throws LightRpcException
    {
        return process(message, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte[] process(byte[] message, java.util.Map<String, String> context)
        throws LightRpcException
    {
        try
        {
            return _iceI_processAsync(message, context, true).waitForResponseOrUserEx();
        }
        catch(LightRpcException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<byte[]> processAsync(byte[] message)
    {
        return _iceI_processAsync(message, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<byte[]> processAsync(byte[] message, java.util.Map<String, String> context)
    {
        return _iceI_processAsync(message, context, false);
    }

    /**
     * @hidden
     * @param iceP_message -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<byte[]> _iceI_processAsync(byte[] iceP_message, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<byte[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "process", null, sync, _iceE_process);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeByteSeq(iceP_message);
                 }, istr -> {
                     byte[] ret;
                     ret = istr.readByteSeq();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_process =
    {
        LightRpcException.class
    };

    default byte[] queryGroupInfo(String token)
        throws LightRpcException
    {
        return queryGroupInfo(token, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte[] queryGroupInfo(String token, java.util.Map<String, String> context)
        throws LightRpcException
    {
        try
        {
            return _iceI_queryGroupInfoAsync(token, context, true).waitForResponseOrUserEx();
        }
        catch(LightRpcException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<byte[]> queryGroupInfoAsync(String token)
    {
        return _iceI_queryGroupInfoAsync(token, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<byte[]> queryGroupInfoAsync(String token, java.util.Map<String, String> context)
    {
        return _iceI_queryGroupInfoAsync(token, context, false);
    }

    /**
     * @hidden
     * @param iceP_token -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<byte[]> _iceI_queryGroupInfoAsync(String iceP_token, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<byte[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "queryGroupInfo", null, sync, _iceE_queryGroupInfo);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_token);
                 }, istr -> {
                     byte[] ret;
                     ret = istr.readByteSeq();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_queryGroupInfo =
    {
        LightRpcException.class
    };

    default byte[] queryStatInfo(int id)
        throws LightRpcException
    {
        return queryStatInfo(id, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte[] queryStatInfo(int id, java.util.Map<String, String> context)
        throws LightRpcException
    {
        try
        {
            return _iceI_queryStatInfoAsync(id, context, true).waitForResponseOrUserEx();
        }
        catch(LightRpcException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<byte[]> queryStatInfoAsync(int id)
    {
        return _iceI_queryStatInfoAsync(id, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<byte[]> queryStatInfoAsync(int id, java.util.Map<String, String> context)
    {
        return _iceI_queryStatInfoAsync(id, context, false);
    }

    /**
     * @hidden
     * @param iceP_id -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<byte[]> _iceI_queryStatInfoAsync(int iceP_id, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<byte[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "queryStatInfo", null, sync, _iceE_queryStatInfo);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_id);
                 }, istr -> {
                     byte[] ret;
                     ret = istr.readByteSeq();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_queryStatInfo =
    {
        LightRpcException.class
    };

    default byte[] dataDurationQuery(int statId, String dimensValue, long startTime, long endTime)
        throws LightRpcException
    {
        return dataDurationQuery(statId, dimensValue, startTime, endTime, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte[] dataDurationQuery(int statId, String dimensValue, long startTime, long endTime, java.util.Map<String, String> context)
        throws LightRpcException
    {
        try
        {
            return _iceI_dataDurationQueryAsync(statId, dimensValue, startTime, endTime, context, true).waitForResponseOrUserEx();
        }
        catch(LightRpcException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<byte[]> dataDurationQueryAsync(int statId, String dimensValue, long startTime, long endTime)
    {
        return _iceI_dataDurationQueryAsync(statId, dimensValue, startTime, endTime, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<byte[]> dataDurationQueryAsync(int statId, String dimensValue, long startTime, long endTime, java.util.Map<String, String> context)
    {
        return _iceI_dataDurationQueryAsync(statId, dimensValue, startTime, endTime, context, false);
    }

    /**
     * @hidden
     * @param iceP_statId -
     * @param iceP_dimensValue -
     * @param iceP_startTime -
     * @param iceP_endTime -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<byte[]> _iceI_dataDurationQueryAsync(int iceP_statId, String iceP_dimensValue, long iceP_startTime, long iceP_endTime, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<byte[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "dataDurationQuery", null, sync, _iceE_dataDurationQuery);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_statId);
                     ostr.writeString(iceP_dimensValue);
                     ostr.writeLong(iceP_startTime);
                     ostr.writeLong(iceP_endTime);
                 }, istr -> {
                     byte[] ret;
                     ret = istr.readByteSeq();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_dataDurationQuery =
    {
        LightRpcException.class
    };

    default byte[] dataQuery(int statId, String dimensValue, java.util.List<Long> batchList)
        throws LightRpcException
    {
        return dataQuery(statId, dimensValue, batchList, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte[] dataQuery(int statId, String dimensValue, java.util.List<Long> batchList, java.util.Map<String, String> context)
        throws LightRpcException
    {
        try
        {
            return _iceI_dataQueryAsync(statId, dimensValue, batchList, context, true).waitForResponseOrUserEx();
        }
        catch(LightRpcException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<byte[]> dataQueryAsync(int statId, String dimensValue, java.util.List<Long> batchList)
    {
        return _iceI_dataQueryAsync(statId, dimensValue, batchList, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<byte[]> dataQueryAsync(int statId, String dimensValue, java.util.List<Long> batchList, java.util.Map<String, String> context)
    {
        return _iceI_dataQueryAsync(statId, dimensValue, batchList, context, false);
    }

    /**
     * @hidden
     * @param iceP_statId -
     * @param iceP_dimensValue -
     * @param iceP_batchList -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<byte[]> _iceI_dataQueryAsync(int iceP_statId, String iceP_dimensValue, java.util.List<Long> iceP_batchList, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<byte[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "dataQuery", null, sync, _iceE_dataQuery);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_statId);
                     ostr.writeString(iceP_dimensValue);
                     LongListHelper.write(ostr, iceP_batchList);
                 }, istr -> {
                     byte[] ret;
                     ret = istr.readByteSeq();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_dataQuery =
    {
        LightRpcException.class
    };

    default byte[] dataDurationQueryWithDimensList(int statId, java.util.List<String> dimensValueList, long startTime, long endTime)
        throws LightRpcException
    {
        return dataDurationQueryWithDimensList(statId, dimensValueList, startTime, endTime, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte[] dataDurationQueryWithDimensList(int statId, java.util.List<String> dimensValueList, long startTime, long endTime, java.util.Map<String, String> context)
        throws LightRpcException
    {
        try
        {
            return _iceI_dataDurationQueryWithDimensListAsync(statId, dimensValueList, startTime, endTime, context, true).waitForResponseOrUserEx();
        }
        catch(LightRpcException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<byte[]> dataDurationQueryWithDimensListAsync(int statId, java.util.List<String> dimensValueList, long startTime, long endTime)
    {
        return _iceI_dataDurationQueryWithDimensListAsync(statId, dimensValueList, startTime, endTime, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<byte[]> dataDurationQueryWithDimensListAsync(int statId, java.util.List<String> dimensValueList, long startTime, long endTime, java.util.Map<String, String> context)
    {
        return _iceI_dataDurationQueryWithDimensListAsync(statId, dimensValueList, startTime, endTime, context, false);
    }

    /**
     * @hidden
     * @param iceP_statId -
     * @param iceP_dimensValueList -
     * @param iceP_startTime -
     * @param iceP_endTime -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<byte[]> _iceI_dataDurationQueryWithDimensListAsync(int iceP_statId, java.util.List<String> iceP_dimensValueList, long iceP_startTime, long iceP_endTime, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<byte[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "dataDurationQueryWithDimensList", null, sync, _iceE_dataDurationQueryWithDimensList);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_statId);
                     StringListHelper.write(ostr, iceP_dimensValueList);
                     ostr.writeLong(iceP_startTime);
                     ostr.writeLong(iceP_endTime);
                 }, istr -> {
                     byte[] ret;
                     ret = istr.readByteSeq();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_dataDurationQueryWithDimensList =
    {
        LightRpcException.class
    };

    default byte[] dataQueryWithDimensList(int statId, java.util.List<String> dimensValueList, java.util.List<Long> batchList)
        throws LightRpcException
    {
        return dataQueryWithDimensList(statId, dimensValueList, batchList, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte[] dataQueryWithDimensList(int statId, java.util.List<String> dimensValueList, java.util.List<Long> batchList, java.util.Map<String, String> context)
        throws LightRpcException
    {
        try
        {
            return _iceI_dataQueryWithDimensListAsync(statId, dimensValueList, batchList, context, true).waitForResponseOrUserEx();
        }
        catch(LightRpcException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<byte[]> dataQueryWithDimensListAsync(int statId, java.util.List<String> dimensValueList, java.util.List<Long> batchList)
    {
        return _iceI_dataQueryWithDimensListAsync(statId, dimensValueList, batchList, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<byte[]> dataQueryWithDimensListAsync(int statId, java.util.List<String> dimensValueList, java.util.List<Long> batchList, java.util.Map<String, String> context)
    {
        return _iceI_dataQueryWithDimensListAsync(statId, dimensValueList, batchList, context, false);
    }

    /**
     * @hidden
     * @param iceP_statId -
     * @param iceP_dimensValueList -
     * @param iceP_batchList -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<byte[]> _iceI_dataQueryWithDimensListAsync(int iceP_statId, java.util.List<String> iceP_dimensValueList, java.util.List<Long> iceP_batchList, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<byte[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "dataQueryWithDimensList", null, sync, _iceE_dataQueryWithDimensList);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_statId);
                     StringListHelper.write(ostr, iceP_dimensValueList);
                     LongListHelper.write(ostr, iceP_batchList);
                 }, istr -> {
                     byte[] ret;
                     ret = istr.readByteSeq();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_dataQueryWithDimensList =
    {
        LightRpcException.class
    };

    default byte[] limitQuery(int statId, long batchTime)
        throws LightRpcException
    {
        return limitQuery(statId, batchTime, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte[] limitQuery(int statId, long batchTime, java.util.Map<String, String> context)
        throws LightRpcException
    {
        try
        {
            return _iceI_limitQueryAsync(statId, batchTime, context, true).waitForResponseOrUserEx();
        }
        catch(LightRpcException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<byte[]> limitQueryAsync(int statId, long batchTime)
    {
        return _iceI_limitQueryAsync(statId, batchTime, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<byte[]> limitQueryAsync(int statId, long batchTime, java.util.Map<String, String> context)
    {
        return _iceI_limitQueryAsync(statId, batchTime, context, false);
    }

    /**
     * @hidden
     * @param iceP_statId -
     * @param iceP_batchTime -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<byte[]> _iceI_limitQueryAsync(int iceP_statId, long iceP_batchTime, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<byte[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "limitQuery", null, sync, _iceE_limitQuery);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeInt(iceP_statId);
                     ostr.writeLong(iceP_batchTime);
                 }, istr -> {
                     byte[] ret;
                     ret = istr.readByteSeq();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_limitQuery =
    {
        LightRpcException.class
    };

    default byte[] dataDurationQueryV2(String callerName, String callerKey, int statId, String dimensValue, long startTime, long endTime)
        throws LightRpcException
    {
        return dataDurationQueryV2(callerName, callerKey, statId, dimensValue, startTime, endTime, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte[] dataDurationQueryV2(String callerName, String callerKey, int statId, String dimensValue, long startTime, long endTime, java.util.Map<String, String> context)
        throws LightRpcException
    {
        try
        {
            return _iceI_dataDurationQueryV2Async(callerName, callerKey, statId, dimensValue, startTime, endTime, context, true).waitForResponseOrUserEx();
        }
        catch(LightRpcException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<byte[]> dataDurationQueryV2Async(String callerName, String callerKey, int statId, String dimensValue, long startTime, long endTime)
    {
        return _iceI_dataDurationQueryV2Async(callerName, callerKey, statId, dimensValue, startTime, endTime, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<byte[]> dataDurationQueryV2Async(String callerName, String callerKey, int statId, String dimensValue, long startTime, long endTime, java.util.Map<String, String> context)
    {
        return _iceI_dataDurationQueryV2Async(callerName, callerKey, statId, dimensValue, startTime, endTime, context, false);
    }

    /**
     * @hidden
     * @param iceP_callerName -
     * @param iceP_callerKey -
     * @param iceP_statId -
     * @param iceP_dimensValue -
     * @param iceP_startTime -
     * @param iceP_endTime -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<byte[]> _iceI_dataDurationQueryV2Async(String iceP_callerName, String iceP_callerKey, int iceP_statId, String iceP_dimensValue, long iceP_startTime, long iceP_endTime, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<byte[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "dataDurationQueryV2", null, sync, _iceE_dataDurationQueryV2);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_callerName);
                     ostr.writeString(iceP_callerKey);
                     ostr.writeInt(iceP_statId);
                     ostr.writeString(iceP_dimensValue);
                     ostr.writeLong(iceP_startTime);
                     ostr.writeLong(iceP_endTime);
                 }, istr -> {
                     byte[] ret;
                     ret = istr.readByteSeq();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_dataDurationQueryV2 =
    {
        LightRpcException.class
    };

    default byte[] dataQueryV2(String callerName, String callerKey, int statId, String dimensValue, java.util.List<Long> batchList)
        throws LightRpcException
    {
        return dataQueryV2(callerName, callerKey, statId, dimensValue, batchList, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte[] dataQueryV2(String callerName, String callerKey, int statId, String dimensValue, java.util.List<Long> batchList, java.util.Map<String, String> context)
        throws LightRpcException
    {
        try
        {
            return _iceI_dataQueryV2Async(callerName, callerKey, statId, dimensValue, batchList, context, true).waitForResponseOrUserEx();
        }
        catch(LightRpcException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<byte[]> dataQueryV2Async(String callerName, String callerKey, int statId, String dimensValue, java.util.List<Long> batchList)
    {
        return _iceI_dataQueryV2Async(callerName, callerKey, statId, dimensValue, batchList, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<byte[]> dataQueryV2Async(String callerName, String callerKey, int statId, String dimensValue, java.util.List<Long> batchList, java.util.Map<String, String> context)
    {
        return _iceI_dataQueryV2Async(callerName, callerKey, statId, dimensValue, batchList, context, false);
    }

    /**
     * @hidden
     * @param iceP_callerName -
     * @param iceP_callerKey -
     * @param iceP_statId -
     * @param iceP_dimensValue -
     * @param iceP_batchList -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<byte[]> _iceI_dataQueryV2Async(String iceP_callerName, String iceP_callerKey, int iceP_statId, String iceP_dimensValue, java.util.List<Long> iceP_batchList, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<byte[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "dataQueryV2", null, sync, _iceE_dataQueryV2);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_callerName);
                     ostr.writeString(iceP_callerKey);
                     ostr.writeInt(iceP_statId);
                     ostr.writeString(iceP_dimensValue);
                     LongListHelper.write(ostr, iceP_batchList);
                 }, istr -> {
                     byte[] ret;
                     ret = istr.readByteSeq();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_dataQueryV2 =
    {
        LightRpcException.class
    };

    default byte[] dataDurationQueryWithDimensListV2(String callerName, String callerKey, int statId, java.util.List<String> dimensValueList, long startTime, long endTime)
        throws LightRpcException
    {
        return dataDurationQueryWithDimensListV2(callerName, callerKey, statId, dimensValueList, startTime, endTime, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte[] dataDurationQueryWithDimensListV2(String callerName, String callerKey, int statId, java.util.List<String> dimensValueList, long startTime, long endTime, java.util.Map<String, String> context)
        throws LightRpcException
    {
        try
        {
            return _iceI_dataDurationQueryWithDimensListV2Async(callerName, callerKey, statId, dimensValueList, startTime, endTime, context, true).waitForResponseOrUserEx();
        }
        catch(LightRpcException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<byte[]> dataDurationQueryWithDimensListV2Async(String callerName, String callerKey, int statId, java.util.List<String> dimensValueList, long startTime, long endTime)
    {
        return _iceI_dataDurationQueryWithDimensListV2Async(callerName, callerKey, statId, dimensValueList, startTime, endTime, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<byte[]> dataDurationQueryWithDimensListV2Async(String callerName, String callerKey, int statId, java.util.List<String> dimensValueList, long startTime, long endTime, java.util.Map<String, String> context)
    {
        return _iceI_dataDurationQueryWithDimensListV2Async(callerName, callerKey, statId, dimensValueList, startTime, endTime, context, false);
    }

    /**
     * @hidden
     * @param iceP_callerName -
     * @param iceP_callerKey -
     * @param iceP_statId -
     * @param iceP_dimensValueList -
     * @param iceP_startTime -
     * @param iceP_endTime -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<byte[]> _iceI_dataDurationQueryWithDimensListV2Async(String iceP_callerName, String iceP_callerKey, int iceP_statId, java.util.List<String> iceP_dimensValueList, long iceP_startTime, long iceP_endTime, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<byte[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "dataDurationQueryWithDimensListV2", null, sync, _iceE_dataDurationQueryWithDimensListV2);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_callerName);
                     ostr.writeString(iceP_callerKey);
                     ostr.writeInt(iceP_statId);
                     StringListHelper.write(ostr, iceP_dimensValueList);
                     ostr.writeLong(iceP_startTime);
                     ostr.writeLong(iceP_endTime);
                 }, istr -> {
                     byte[] ret;
                     ret = istr.readByteSeq();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_dataDurationQueryWithDimensListV2 =
    {
        LightRpcException.class
    };

    default byte[] dataQueryWithDimensListV2(String callerName, String callerKey, int statId, java.util.List<String> dimensValueList, java.util.List<Long> batchList)
        throws LightRpcException
    {
        return dataQueryWithDimensListV2(callerName, callerKey, statId, dimensValueList, batchList, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte[] dataQueryWithDimensListV2(String callerName, String callerKey, int statId, java.util.List<String> dimensValueList, java.util.List<Long> batchList, java.util.Map<String, String> context)
        throws LightRpcException
    {
        try
        {
            return _iceI_dataQueryWithDimensListV2Async(callerName, callerKey, statId, dimensValueList, batchList, context, true).waitForResponseOrUserEx();
        }
        catch(LightRpcException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<byte[]> dataQueryWithDimensListV2Async(String callerName, String callerKey, int statId, java.util.List<String> dimensValueList, java.util.List<Long> batchList)
    {
        return _iceI_dataQueryWithDimensListV2Async(callerName, callerKey, statId, dimensValueList, batchList, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<byte[]> dataQueryWithDimensListV2Async(String callerName, String callerKey, int statId, java.util.List<String> dimensValueList, java.util.List<Long> batchList, java.util.Map<String, String> context)
    {
        return _iceI_dataQueryWithDimensListV2Async(callerName, callerKey, statId, dimensValueList, batchList, context, false);
    }

    /**
     * @hidden
     * @param iceP_callerName -
     * @param iceP_callerKey -
     * @param iceP_statId -
     * @param iceP_dimensValueList -
     * @param iceP_batchList -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<byte[]> _iceI_dataQueryWithDimensListV2Async(String iceP_callerName, String iceP_callerKey, int iceP_statId, java.util.List<String> iceP_dimensValueList, java.util.List<Long> iceP_batchList, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<byte[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "dataQueryWithDimensListV2", null, sync, _iceE_dataQueryWithDimensListV2);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_callerName);
                     ostr.writeString(iceP_callerKey);
                     ostr.writeInt(iceP_statId);
                     StringListHelper.write(ostr, iceP_dimensValueList);
                     LongListHelper.write(ostr, iceP_batchList);
                 }, istr -> {
                     byte[] ret;
                     ret = istr.readByteSeq();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_dataQueryWithDimensListV2 =
    {
        LightRpcException.class
    };

    default byte[] limitQueryV2(String callerName, String callerKey, int statId, long batchTime)
        throws LightRpcException
    {
        return limitQueryV2(callerName, callerKey, statId, batchTime, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default byte[] limitQueryV2(String callerName, String callerKey, int statId, long batchTime, java.util.Map<String, String> context)
        throws LightRpcException
    {
        try
        {
            return _iceI_limitQueryV2Async(callerName, callerKey, statId, batchTime, context, true).waitForResponseOrUserEx();
        }
        catch(LightRpcException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<byte[]> limitQueryV2Async(String callerName, String callerKey, int statId, long batchTime)
    {
        return _iceI_limitQueryV2Async(callerName, callerKey, statId, batchTime, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<byte[]> limitQueryV2Async(String callerName, String callerKey, int statId, long batchTime, java.util.Map<String, String> context)
    {
        return _iceI_limitQueryV2Async(callerName, callerKey, statId, batchTime, context, false);
    }

    /**
     * @hidden
     * @param iceP_callerName -
     * @param iceP_callerKey -
     * @param iceP_statId -
     * @param iceP_batchTime -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<byte[]> _iceI_limitQueryV2Async(String iceP_callerName, String iceP_callerKey, int iceP_statId, long iceP_batchTime, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<byte[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "limitQueryV2", null, sync, _iceE_limitQueryV2);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_callerName);
                     ostr.writeString(iceP_callerKey);
                     ostr.writeInt(iceP_statId);
                     ostr.writeLong(iceP_batchTime);
                 }, istr -> {
                     byte[] ret;
                     ret = istr.readByteSeq();
                     return ret;
                 });
        return f;
    }

    /** @hidden */
    static final Class<?>[] _iceE_limitQueryV2 =
    {
        LightRpcException.class
    };

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RemoteLightServerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), RemoteLightServerPrx.class, _RemoteLightServerPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RemoteLightServerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), RemoteLightServerPrx.class, _RemoteLightServerPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RemoteLightServerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), RemoteLightServerPrx.class, _RemoteLightServerPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static RemoteLightServerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), RemoteLightServerPrx.class, _RemoteLightServerPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static RemoteLightServerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, RemoteLightServerPrx.class, _RemoteLightServerPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static RemoteLightServerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, RemoteLightServerPrx.class, _RemoteLightServerPrxI.class);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the per-proxy context.
     * @param newContext The context for the new proxy.
     * @return A proxy with the specified per-proxy context.
     **/
    @Override
    default RemoteLightServerPrx ice_context(java.util.Map<String, String> newContext)
    {
        return (RemoteLightServerPrx)_ice_context(newContext);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the adapter ID.
     * @param newAdapterId The adapter ID for the new proxy.
     * @return A proxy with the specified adapter ID.
     **/
    @Override
    default RemoteLightServerPrx ice_adapterId(String newAdapterId)
    {
        return (RemoteLightServerPrx)_ice_adapterId(newAdapterId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoints.
     * @param newEndpoints The endpoints for the new proxy.
     * @return A proxy with the specified endpoints.
     **/
    @Override
    default RemoteLightServerPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints)
    {
        return (RemoteLightServerPrx)_ice_endpoints(newEndpoints);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator cache timeout.
     * @param newTimeout The new locator cache timeout (in seconds).
     * @return A proxy with the specified locator cache timeout.
     **/
    @Override
    default RemoteLightServerPrx ice_locatorCacheTimeout(int newTimeout)
    {
        return (RemoteLightServerPrx)_ice_locatorCacheTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the invocation timeout.
     * @param newTimeout The new invocation timeout (in seconds).
     * @return A proxy with the specified invocation timeout.
     **/
    @Override
    default RemoteLightServerPrx ice_invocationTimeout(int newTimeout)
    {
        return (RemoteLightServerPrx)_ice_invocationTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for connection caching.
     * @param newCache <code>true</code> if the new proxy should cache connections; <code>false</code> otherwise.
     * @return A proxy with the specified caching policy.
     **/
    @Override
    default RemoteLightServerPrx ice_connectionCached(boolean newCache)
    {
        return (RemoteLightServerPrx)_ice_connectionCached(newCache);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoint selection policy.
     * @param newType The new endpoint selection policy.
     * @return A proxy with the specified endpoint selection policy.
     **/
    @Override
    default RemoteLightServerPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType)
    {
        return (RemoteLightServerPrx)_ice_endpointSelection(newType);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for how it selects endpoints.
     * @param b If <code>b</code> is <code>true</code>, only endpoints that use a secure transport are
     * used by the new proxy. If <code>b</code> is false, the returned proxy uses both secure and
     * insecure endpoints.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default RemoteLightServerPrx ice_secure(boolean b)
    {
        return (RemoteLightServerPrx)_ice_secure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the encoding used to marshal parameters.
     * @param e The encoding version to use to marshal request parameters.
     * @return A proxy with the specified encoding version.
     **/
    @Override
    default RemoteLightServerPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e)
    {
        return (RemoteLightServerPrx)_ice_encodingVersion(e);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its endpoint selection policy.
     * @param b If <code>b</code> is <code>true</code>, the new proxy will use secure endpoints for invocations
     * and only use insecure endpoints if an invocation cannot be made via secure endpoints. If <code>b</code> is
     * <code>false</code>, the proxy prefers insecure endpoints to secure ones.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default RemoteLightServerPrx ice_preferSecure(boolean b)
    {
        return (RemoteLightServerPrx)_ice_preferSecure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the router.
     * @param router The router for the new proxy.
     * @return A proxy with the specified router.
     **/
    @Override
    default RemoteLightServerPrx ice_router(com.zeroc.Ice.RouterPrx router)
    {
        return (RemoteLightServerPrx)_ice_router(router);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator.
     * @param locator The locator for the new proxy.
     * @return A proxy with the specified locator.
     **/
    @Override
    default RemoteLightServerPrx ice_locator(com.zeroc.Ice.LocatorPrx locator)
    {
        return (RemoteLightServerPrx)_ice_locator(locator);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for collocation optimization.
     * @param b <code>true</code> if the new proxy enables collocation optimization; <code>false</code> otherwise.
     * @return A proxy with the specified collocation optimization.
     **/
    @Override
    default RemoteLightServerPrx ice_collocationOptimized(boolean b)
    {
        return (RemoteLightServerPrx)_ice_collocationOptimized(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses twoway invocations.
     * @return A proxy that uses twoway invocations.
     **/
    @Override
    default RemoteLightServerPrx ice_twoway()
    {
        return (RemoteLightServerPrx)_ice_twoway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses oneway invocations.
     * @return A proxy that uses oneway invocations.
     **/
    @Override
    default RemoteLightServerPrx ice_oneway()
    {
        return (RemoteLightServerPrx)_ice_oneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch oneway invocations.
     * @return A proxy that uses batch oneway invocations.
     **/
    @Override
    default RemoteLightServerPrx ice_batchOneway()
    {
        return (RemoteLightServerPrx)_ice_batchOneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses datagram invocations.
     * @return A proxy that uses datagram invocations.
     **/
    @Override
    default RemoteLightServerPrx ice_datagram()
    {
        return (RemoteLightServerPrx)_ice_datagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch datagram invocations.
     * @return A proxy that uses batch datagram invocations.
     **/
    @Override
    default RemoteLightServerPrx ice_batchDatagram()
    {
        return (RemoteLightServerPrx)_ice_batchDatagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, except for compression.
     * @param co <code>true</code> enables compression for the new proxy; <code>false</code> disables compression.
     * @return A proxy with the specified compression setting.
     **/
    @Override
    default RemoteLightServerPrx ice_compress(boolean co)
    {
        return (RemoteLightServerPrx)_ice_compress(co);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection timeout setting.
     * @param t The connection timeout for the proxy in milliseconds.
     * @return A proxy with the specified timeout.
     **/
    @Override
    default RemoteLightServerPrx ice_timeout(int t)
    {
        return (RemoteLightServerPrx)_ice_timeout(t);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection ID.
     * @param connectionId The connection ID for the new proxy. An empty string removes the connection ID.
     * @return A proxy with the specified connection ID.
     **/
    @Override
    default RemoteLightServerPrx ice_connectionId(String connectionId)
    {
        return (RemoteLightServerPrx)_ice_connectionId(connectionId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except it's a fixed proxy bound
     * the given connection.@param connection The fixed proxy connection.
     * @return A fixed proxy bound to the given connection.
     **/
    @Override
    default RemoteLightServerPrx ice_fixed(com.zeroc.Ice.Connection connection)
    {
        return (RemoteLightServerPrx)_ice_fixed(connection);
    }

    static String ice_staticId()
    {
        return "::LightServer::RemoteLightServer";
    }
}
